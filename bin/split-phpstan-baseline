#!/usr/bin/env php
<?php declare(strict_types=1);

namespace ShipMonk\PHPStan\Baseline;

use ShipMonk\PHPStan\Baseline\Exception\ErrorException;
use ShipMonk\PHPStan\Baseline\Handler\HandlerFactory;
use SplFileInfo;

$autoloadFiles = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

/**
 * @return never
 */
function error(string $message): void
{
    fwrite(STDERR, "\n! $message\n\n");
    exit(1);
}

$providedOptions = getopt('', ['tabs'], $restIndex);
$args = array_slice($argv, $restIndex);

$loaderFile = $args[0] ?? null;
$indent = isset($providedOptions['tabs'])
    ? "\t"
    : '    ';

if ($loaderFile === null) {
    error(
        "Missing argument. Usage:\n".
        " vendor/bin/phpstan --generate-baseline=baselines/loader.neon && vendor/bin/split-phpstan-baseline baselines/loader.neon"
    );
}

if (!is_file($loaderFile)) {
    error("Invalid argument, '$loaderFile' is not a file");
}

$splFile = new SplFileInfo($loaderFile);
$folder = dirname($splFile->getRealPath());
$extension = $splFile->getExtension();

try {
    $handler = HandlerFactory::create($extension);
    $data = $handler->decodeBaseline($loaderFile);
} catch (ErrorException $e) {
    error($e->getMessage());
}
if (!isset($data['parameters']['ignoreErrors'])) {
    error(
        "Invalid argument, expected $extension file with 'parameters.ignoreErrors' key in '$loaderFile'." .
        "\n - Did you run native baseline generation first?" .
        "\n - You can so via vendor/bin/phpstan --generate-baseline=$loaderFile"
    );
}

$groupedErrors = [];
foreach ($data['parameters']['ignoreErrors'] as $index => $error) {
    $identifier = $error['identifier'] ?? 'missing-identifier';

    $message = $error['message'] ?? error("Ignored error #$index is missing 'message'");
    $count = $error['count'] ?? error("Ignored error #$index is missing 'count'");
    $path = $error['path'] ?? error("Ignored error #$index is missing 'path'");

    unset($error['identifier']);
    $groupedErrors[$identifier][] = [
        'message' => $message,
        'count' => $count,
        'path' => str_replace($folder, '', $path), // __DIR__ got expanded for php
    ];
}

ksort($groupedErrors);

$createdBaselines = [];

foreach ($groupedErrors as $identifier => $errors) {
    $filePath = $folder . '/' . $identifier . '.' . $extension;
    $createdBaselines[] = $identifier . '.' . $extension;

    $errorsCount = count($errors);
    $plural = $errorsCount === 1 ? '' : 's';
    $prefix = "total $errorsCount error$plural";

    $encodedData = $handler->encodeBaseline($prefix, $errors, $indent);
    file_put_contents($filePath, $encodedData);
    echo "Writing baseline file $filePath with $errorsCount errors\n";
}

file_put_contents($loaderFile, $handler->encodeBaselineLoader($createdBaselines, $indent));
echo "Writing baseline loader to $loaderFile\n";
